---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: eck-stack
  namespace: monitoring
spec:
  chart:
    spec:
      chart: eck-stack
      reconcileStrategy: ChartVersion
      sourceRef:
        kind: HelmRepository
        name: elastic
        namespace: flux-system
  interval: 1m0s
  values:
    eck-elasticsearch:
      enabled: true
      fullnameOverride: es
    eck-kibana:
      enabled: true
      spec:
        elasticsearchRef:
          name: es
---
apiVersion: elasticsearch.k8s.elastic.co/v1
kind: Elasticsearch
metadata:
  name: search
  namespace: monitoring
spec:
  version: 8.4.3
  auth:
    fileRealm:
      - secretName: es-elastic
    roles:
      - secretName: es-roles
  nodeSets:
    - name: master
      count: 1
      config:
        node.roles: ["master"]
    - name: data
      count: 2
      config:
        node.roles: ["data", "ingest"]
        node.attr.type: "search"
        xpack.security.enabled: "true"
        xpack.security.authc:
          anonymous:
            username: anonymous
            roles: superuser
            authz_exception: false
---
apiVersion: kibana.k8s.elastic.co/v1
kind: Kibana
metadata:
  name: kibana
  namespace: monitoring
spec:
  version: 8.4.3
  count: 1
  elasticsearchRef:
    name: search
  http:
    service:
      spec:
        type: ClusterIP
    tls:
      selfSignedCertificate:
        disabled: true
  podTemplate:
    spec:
      containers:
        - name: kibana
          resources:
            limits:
              memory: 2Gi
              cpu: 2
            requests:
              memory: 700Mi
              cpu: 500m

  config:
    xpack:
      monitoring:
        kibana:
          collection:
            enabled: false
        collection:
          enabled: true
        ui:
          ccs:
            enabled: false
      discoverEnhanced:
        actions:
          exploreDataInChart:
            enabled: true
    xpack.fleet.agents.elasticsearch.hosts:
      ["https://elasticsearch-quickstart-es-http.default.svc:9200"]
    xpack.fleet.agents.fleet_server.hosts:
      ["https://fleet-server-quickstart-agent-http.default.svc:8220"]
    xpack.fleet.packages:
      - name: system
        version: latest
      - name: elastic_agent
        version: latest
      - name: fleet_server
        version: latest
    xpack.fleet.agentPolicies:
      - name: Fleet Server on ECK policy
        id: eck-fleet-server
        is_default_fleet_server: true
        namespace: default
        monitoring_enabled:
          - logs
          - metrics
        unenroll_timeout: 900
        package_policies:
          - name: fleet_server-1
            id: fleet_server-1
            package:
              name: fleet_server
      - name: Elastic Agent on ECK policy
        id: eck-agent
        namespace: default
        monitoring_enabled:
          - logs
          - metrics
        unenroll_timeout: 900
        is_default: true
        package_policies:
          - name: system-1
            id: system-1
            package:
              name: system
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kibana
  namespace: monitoring
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-production"
    external-dns/is-public: "true"
    external-dns.alpha.kubernetes.io/cloudflare-proxied: "false"
    external-dns.alpha.kubernetes.io/target: "k8s.emu.sh"
spec:

---
# apiVersion: beat.k8s.elastic.co/v1beta1
# kind: Beat
# metadata:
#   name: filebeat
#   namespace: monitoring
# spec:
#   type: filebeat
#   version: 8.4.3
#   elasticsearchRef:
#     name: search
#   kibanaRef:
#     name: kibana
#   config:
#     filebeat.autodiscover.providers:
#       - node: ${NODE_NAME}
#         type: kubernetes
#         hints.default_config.enabled: "false"
#         templates:
#           - condition.equals.kubernetes.namespace: log-namespace
#             config:
#               - paths:
#                   ["/var/log/containers/*${data.kubernetes.container.id}.log"]
#                 type: container
#           - condition.equals.kubernetes.labels.log-label: "true"
#             config:
#               - paths:
#                   ["/var/log/containers/*${data.kubernetes.container.id}.log"]
#                 type: container
#     processors:
#       - add_cloud_metadata: {}
#       - add_host_metadata: {}
#     autodiscover:
#       providers:
#         - node: ${NODE_NAME}
#           type: kubernetes
#           hints:
#             enabled: true
#             default_config:
#               type: container
#               paths:
#                 - /var/log/containers/*${data.kubernetes.container.id}.log
#   daemonSet:
#     podTemplate:
#       spec:
#         serviceAccount: filebeat
#         automountServiceAccountToken: true
#         containers:
#           - name: filebeat
#             env:
#               - name: NODE_NAME
#                 valueFrom:
#                   fieldRef:
#                     fieldPath: spec.nodeName
#             volumeMounts:
#               - name: varlogcontainers
#                 mountPath: /var/log/containers
#               - name: varlogpods
#                 mountPath: /var/log/pods
#               - name: varlibdockercontainers
#                 mountPath: /var/lib/docker/containers
#         dnsPolicy: ClusterFirstWithHostNet
#         hostNetwork: true
#         securityContext:
#           runAsUser: 0
#         volumes:
#           - name: varlogcontainers
#             hostPath:
#               path: /var/log/containers
#           - name: varlogpods
#             hostPath:
#               path: /var/log/pods
#           - name: varlibdockercontainers
#             hostPath:
#               path: /var/lib/docker/containers

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: filebeat
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: elastic-beat-autodiscover-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: elastic-beat-autodiscover
subjects:
  - kind: ServiceAccount
    name: filebeat
    namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: elastic-beat-autodiscover
rules:
  - apiGroups: [""]
    resources: ["nodes", "namespaces", "events", "pods"]
    verbs: ["get", "list", "watch"]
---
apiVersion: agent.k8s.elastic.co/v1alpha1
kind: Agent
metadata:
  name: fleet
  namespace: monitoring
spec:
  version: 8.4.3
  kibanaRef:
    name: kibana
  elasticsearchRefs:
    - name: search
  mode: fleet
  fleetServerEnabled: true
  deployment:
    replicas: 1
    podTemplate:
      spec:
        serviceAccountName: agent
        automountServiceAccountToken: true
        securityContext:
          runAsUser: 0
---
apiVersion: agent.k8s.elastic.co/v1alpha1
kind: Agent
metadata:
  name: agent
  namespace: monitoring
spec:
  version: 8.4.3
  kibanaRef:
    name: kibana
  fleetServerRef:
    name: fleet
  mode: fleet
  daemonSet:
    podTemplate:
      spec:
        serviceAccountName: agent
        automountServiceAccountToken: true
        securityContext:
          runAsUser: 0
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: agent
rules:
  - apiGroups: [""] # "" indicates the core API group
    resources:
      - pods
      - nodes
      - namespaces
    verbs:
      - get
      - watch
      - list
  - apiGroups: ["coordination.k8s.io"]
    resources:
      - leases
    verbs:
      - get
      - create
      - update
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: agent
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: agent
subjects:
  - kind: ServiceAccount
    name: agent
    namespace: monitoring
roleRef:
  kind: ClusterRole
  name: agent
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fleet
  namespace: monitoring
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-production"
    external-dns/is-public: "true"
    external-dns.alpha.kubernetes.io/cloudflare-proxied: "false"
    external-dns.alpha.kubernetes.io/target: "k8s.emu.sh"
spec:
