---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: tobs
  namespace: monitoring
spec:
  interval: 15m
  chart:
    spec:
      version: "14.0.0"
      chart: tobs
      sourceRef:
        kind: HelmRepository
        name: timescale
        namespace: flux-system
  install:
    createNamespace: true
    remediation:
      retries: 10
    timeout: 15m
  upgrade:
    remediation:
      retries: 10
    timeout: 15m
  values:
    opentelemetry-operator:
      enabled: true

    promscale:
      enabled: true
      #image: timescale/promscale:0.8.0
      service:
        type: NodePort

    timescaledb-single:
      enabled: true
      replicaCount: 1
      loadBalancer:
        enabled: true
      persistentVolumes:
        data:
          size: 11Gi
        wal:
          size: 5Gi
      backup:
        enabled: false
      #env:
      #  PGBACKREST_REPO1_S3_BUCKET
      #  PGBACKREST_REPO1_S3_ENDPOINT
      #  PGBACKREST_REPO1_S3_REGION
      #  PGBACKREST_REPO1_S3_KEY
      #  PGBACKREST_REPO1_S3_KEY_SECRET

    kube-prometheus-stack:
      enabled: true

      alertManager:
        enabled: true
        alertmanagerSpec:
          replicas: 1

      grafana:
        enabled: true

        prometheus:
          datasource:
            enabled: true
        timescale:
          datasource:
            enabled: true

        adminPassword: ${ELASTIC_PASSWORD}

        ingress:
          enabled: true
          pathType: Prefix
          ingressClassName: "nginx"
          hosts:
            - "gf.${SECRET_DOMAIN}"
          tls: true

      prometheus:
        prometheusSpec:
          replicas: 1
          scrapeInterval: 1m
          scrapeTimeout: 10s
          evaluationInterval: 1m
          retention: 1d
          storageSpec:
            volumeClaimTemplate:
              spec:
                resources:
                  requests:
                    storage: 3Gi
        ingress:
          enabled: true
          pathType: Prefix
          ingressClassName: "nginx"
          hosts:
            - "prom.${SECRET_DOMAIN}"
          tls: true
    # alertmanager:
    #   config:
    #     global:
    #       resolve_timeout: 5m
    #     receivers:
    #       - name: "null"
    #       - name: "discord"
    #         webhook_configs:
    #           - url: http://alertmanager-discord:9094
    #             send_resolved: true
    #     route:
    #       group_by: ["alertname", "job"]
    #       group_wait: 30s
    #       group_interval: 5m
    #       repeat_interval: 6h
    #       receiver: "discord"
    #       routes:
    #         - receiver: "null"
    #           matchers:
    #             - alertname =~ "InfoInhibitor|Watchdog"
    #         - receiver: "discord"
    #           matchers:
    #             - severity = "critical"
    #           continue: true
    #     inhibit_rules:
    #       - source_matchers:
    #           - severity = "critical"
    #         target_matchers:
    #           - severity = "warning"
    # minReadySeconds: 100
    # # ingress:
    # #   enabled: true
    # #   pathType: Prefix
    # #   ingressClassName: "nginx"
    # #   hosts:
    # #     - &host "alerts.${SECRET_DOMAIN}"
    # #   tls:
    # #     - hosts:
    # #         - *host
    # # replicas: 1
    # # storage:
    # #   volumeClaimTemplate:
    # #     spec:
    # #       storageClass: "longhorn"
    # #       resources:
    # #         requests:
    # #           storage: 1Gi

    prometheusOperator:
      resources:
        requests:
          memory: 164M
        limits:
          memory: 300M
      prometheusConfigReloader:
        resources:
          requests:
            memory: 50Mi
          limits:
            memory: 100Mi
    prometheus:
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "nginx"
        #        annotations:
        #          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
        hosts:
          - "prom.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - "prom.${SECRET_DOMAIN}"
      thanosService:
        enabled: false
      prometheusSpec:
        replicas: 1
        podAntiAffinity: hard
        retentionSize: "6GB"
        replicaExternalLabelName: "replica"
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 2d
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: longhorn
              resources:
                requests:
                  storage: 50Gi
        resources:
          requests:
            memory: 2281M
          limits:
            memory: 3123M
